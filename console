<?php

	// Fix some output buffering bugs and clear the screen

	@ob_end_clean();

	// Set up our APPLICATION_ROOT and pseudo-$_SERVER params

	define('APPLICATION_ROOT', realpath(dirname(__FILE__)));

	$_SERVER['DOCUMENT_ROOT']  = (isset($argv[1]))
		? realpath($argv[1]) // Accept an optional parameter as document root
		: dirname(__FILE__);

	$_SERVER['REQUEST_URI']    = '/';
	$_SERVER['REQUEST_METHOD'] = 'GET';
	$_SERVER['REMOTE_ADDR']    = '127.0.0.1';
	$_SERVER['SERVER_NAME']    = 'localhost';

	chdir(implode(DIRECTORY_SEPARATOR, array(
		dirname(__FILE__),
		'includes'
	)));

	// Bootstrap inKWell

	require 'init.php';

	// Set some basics regardless of configuration

	fCore::enableErrorHandling('html');
	fCore::enableExceptionHandling('html');

	$___dbconf   = iw::getConfig('database');
	$___database = ___use_db('default');

	echo PHP_EOL;

	@exec('php -v', $___garbage, $___php);

	if ($___php !== 0) {
		echo PHP_EOL;
		echo 'Please add the PHP executable to your path.';
		echo PHP_EOL;
		exit();
	}

	register_shutdown_function('___respawn');

	$___stdin     = fopen('php://stdin', 'r');
	$___depth     = 0;
	$___line      = 1;
	$___code      = '\?';
	$___command   = '';

	if (isset($argv[1])) {
		include $argv[1];
		$___called_quit = TRUE;
		exit();
	}

	echo 'Welcome to the inKWell Console, you can begin typing PHP or try:';
	echo PHP_EOL;

	do {

		$___code = trim($___code);

		if ($___code && $___code[0] == '\\') {

			switch (substr($___code, 0, 2)) {
				case '\q':
					$___called_quit = TRUE;
				case '\r':
					exit();
					break;
				case '\e':
					if (!($___exec = trim(substr($___code, 2)))) {
						echo 'Please enter a Command: ';
						$___exec = trim(fgets($___stdin));
					}
					passthru($___exec);
					break;
				case '\c':
					___clear_screen();
					break;
				case '\s':
					if (!($___sql = trim(substr($___code, 2)))) {
						echo 'Please enter your SQL: ';
						$___sql = trim(fgets($___stdin));
					}
					___run_query($___database, $___sql);
					break;
				case '\u':
					if (!($___db_select = trim(substr($___code, 2)))) {
						echo 'Enter the database name: ';
						$___db_name = trim(fgets($___stdin));
						echo 'Enter a role (read, write, [either]): ';
						$___db_role = trim(fgets($___stdin));
						if (!$___db_role) {
							$___db_role = 'either';
						}
					} else {
						$___db_select = explode(' ', $___db_select);
						$___db_name   = $___db_select[0];
						$___db_role   = (isset($___db_select[1]))
							? $___db_select[1]
							: 'either';
					}
					$___database = ___use_db($___db_name, $___db_role);
					break;
				case '\>':
					if (!($___directory = trim(substr($___code, 2)))) {
						echo 'Please enter a Directory: ';
						$___directory = trim(fgets($___stdin));
					}
					chdir(trim($___directory, '\'"'));
					break;
				case '\?':
					echo PHP_EOL;
					echo '\c - Clear the Screen'         . PHP_EOL;
					echo '\e - Execute a System Command' . PHP_EOL;
					echo '\q - Quit the Program'         . PHP_EOL;
					echo '\r - Reset the Program'        . PHP_EOL;

					if ($___dbconf['disabled'] === FALSE) {
						echo '\s - Run SQL Statement'    . PHP_EOL;
						echo '\u - Select Database'      . PHP_EOL;
					}

					echo '\> - Change Directory'         . PHP_EOL;
					echo '\? - Display this Message'     . PHP_EOL;
					echo PHP_EOL;
					break;
			}

		} else {

			$___prev_depth = $___depth;

			foreach (token_get_all('<?php ' . $___code) as $___token) {
				if (!is_array($___token)) {
					switch ($___token) {
						case '{':
						case '(':
							$___depth++;
							break;
						case '}':
						case ')':
							$___depth--;
							break;
					}
				}
			}

			if ($___code) {
				$___command  .= $___code . PHP_EOL;
			}

			if ($___depth <= 0) {

				$___depth = 0;
				$___line  = 0;

				if ($___command && ___check($___command)) {

					ob_start();
					fCore::startErrorCapture();

					try {
						eval($___command);
					} catch (Exception $___e) {
						echo 'Exception:  ' . $___e->getMessage();
					}

					$___output  = ob_get_clean();

					if(is_array($errors = fCore::stopErrorCapture())) {
						foreach ($errors as $error) {
							echo $error['type'] . ':  ' . $error['string'];
						}
					}

					if($___output) {
						echo $___output;
						echo PHP_EOL;
					}
				}
				$___command = '';
			}
			$___line++;
		}
		echo '[' . getcwd() . '][' . sprintf('%02s', $___line) . ']# ';
		flush();

	} while(($___code = ___readline($___stdin)));

	/**
	 * A simple readline wrapper that allows us to get the user input via
	 * various methods.
	 *
	 * @param resource $handler A file pointer to the input
	 * @return string The user entered string
	 */
	function ___readline($handler)
	{
		return fgets($handler);
	}

	/**
	 * Register as a shutdown function to ensure that any fatal errors or
	 * uncaught exceptions do not terminate the shell.  This function
	 * will cause it to respawn itself on shutdown.  The only downside is
	 * that all previous variables and information are lost.
	 *
	 * @param void
	 * @return void
	 */
	function ___respawn()
	{
		echo ob_get_clean() . "\n";

		if (!isset($GLOBALS['___called_quit'])) {
			echo "Resetting...\n";
			passthru(implode(' ', array(
				'php -q',
					'-d register_globals=0',
					'-d magic_quotes_gpc=0',
					'-d short_open_tag=0',
					'-d asp_tags=1',
					'-d xdebug.profiler_enabler=0',
					'-d display_errors=1',
					__FILE__,
					$_SERVER['DOCUMENT_ROOT']
			)));
		}
	}

	/**
	 * Checks syntax of a file and outputs where the errors are.
	 *
	 * @param string $file The file to check
	 * @return boolean TRUE if no errors exist, FALSE otherwise
	 */
	function ___verify($file)
	{
		if (fCore::checkOS('windows')) {
			$syntax_check = trim(shell_exec(sprintf('php -d %s -l %s',
				escapeshellarg('error_reporting=E_PARSE'),
				escapeshellarg($file)
			)));
		} else {
			ob_start();

			passthru(sprintf('php -d %s -l %s 2>&1',
				escapeshellarg('error_reporting=E_PARSE'),
				escapeshellarg($file)
			), $return);

			$syntax_check = trim(ob_get_clean());
		}

		list($syntax_check) = preg_split('/[\r\n]+/', $syntax_check);

		if (stripos($syntax_check, 'Parse error') !== FALSE) {
			echo str_replace($file, 'parsed input', $syntax_check);
			echo PHP_EOL;
			return FALSE;
		}

		return TRUE;
	}

	/**
	 * Check validity of chunks of PHP source code based on advanced alien
	 * token logic stolen from the mothership by uploading a virus to their
	 * puter with a piece of fruit.
	 *
	 * @param string $string A string of PHP source code without an open tag
	 * @return boolean TRUE if code appears valid, FALSE otherwise
	 */
	function ___check($source)
	{
		$source  = '<?php ' . trim($source);
		$tmp_dir = iw::getWriteDirectory('.tmp');
		$file    = $tmp_dir . '.console_command';

		file_put_contents($file, $source);

		if (!___verify($file)) {
			return FALSE;
		}

		foreach (($tokens = token_get_all($source)) as $i => $token) {

			if (is_array($token)) {

				if (
					   $token[0] == T_INCLUDE
					|| $token[0] == T_INCLUDE_ONCE
					|| $token[0] == T_REQUIRE
					|| $token[0] == T_REQUIRE_ONCE
				) {
					$c       = 1;
					$collect = '';

					do {
						$next_token = is_array($tokens[$i + $c])
							? $tokens[$i + $c][1]
							: $tokens[$i + $c];

						$collect .= $next_token;
						$c++;

					} while($next_token !== ';');

					eval('$___file = ' . $collect);

					if (!is_readable($___file)) {
						echo sprintf(
							'Error: The file "%s" could not be read',
							$___file
						) . PHP_EOL;
						return FALSE;
					} elseif (!___verify($___file)) {
						return FALSE;
					}

				} elseif ($token[0] == T_STRING && $tokens[$i + 1] == '(') {

					$t      = $token[1];
					$c      = 1;
					$method = NULL;

					do {

						$previous_token = is_array($tokens[$i - $c])
							? $tokens[$i - $c][0]
							: $tokens[$i - $c];

						$c++;

					} while($previous_token == T_WHITESPACE);

					switch ($previous_token) {

						// Safe Cases

						case T_FUNCTION:
						case T_OBJECT_OPERATOR:
							break;

						case T_PAAMAYIM_NEKUDOTAYIM:

							$t      = $tokens[$i - 2][1];
							$method = $token[1];

						case T_NEW:

							if (!class_exists($t)) {
								echo sprintf(
									'Error: Class %s does not exist.',
									$t
								) . PHP_EOL;
								return FALSE;
							} elseif (
								!isset($method)
							) {
								$reflection = new ReflectionClass($t);
								if (!$reflection->isInstantiable()) {
									echo sprintf(
										'Error: Cannot create %s, invalid or ' .
										'non-public constructor.',
										$t
									) . PHP_EOL;
									return FALSE;
								}
							}

							// Handle method_exists check for static methods

							if (isset($method)) {
								if(!method_exists($t, $method)) {
									echo sprintf(
										'Error: Method %s::%s does not exist.',
										$t,
										$method
									) . PHP_EOL;
									return FALSE;
								} elseif (!is_callable(array($t, $method))) {
									echo sprintf(
										'Error: Method %s::%s is not callable.',
										$t,
										$method
									) . PHP_EOL;
									return FALSE;
								}

								$method = NULL;
							}

							break;

						default:

							if (!function_exists($t)) {
								echo sprintf(
									'Error:  Function %s() does not exist.',
									$t
								) . PHP_EOL;
								return FALSE;
							}
							break;
					}
				}
			}
		}

		return TRUE;
	}

	/**
	 * Runs an SQL query on a provided database.  The function will dump
	 * the rows returned in the result using fCore::expose();
	 *
	 * @param fDatabase $db The database object to run the query on
	 * @param string $sql The query to run
	 * @return void
	 */
	function ___run_query($db, $sql)
	{
		if (!($db instanceof fDatabase)) {
			echo PHP_EOL;
			echo 'Cannot run SQL query, database inaccessible'      . PHP_EOL;
			echo '  - Check your current configuration '            . PHP_EOL;
			echo '  - Select a different database using:'           . PHP_EOL;
			echo                                                      PHP_EOL;
			echo '   \u <database_name> [<database_role> = either]' . PHP_EOL;
			echo PHP_EOL;
		} else {
			try {
				$result = $db->query($sql);
				foreach($result as $record) {
					fCore::expose($record);
				}
			} catch (Exception $e) {
				echo 'Exception: ' . $e->getMessage();
				echo PHP_EOL;
			}
		}
	}

	/**
	 * Gracefully attempts to get and return a selected database
	 *
	 * @param string $database The name of the database
	 * @param string $role The role of the database, default 'either'
	 * @return fDatabase The fDatabase object if available, NULL otherwise
	 */
	function ___use_db($database, $role = 'either')
	{
		try {
			return iw::getDatabase($database, $role);
		} catch (fNotFoundException $e) {
			return NULL;
		}
	}

	/**
	 * Clear the screen
	 *
	 * @param void
	 * @return void
	 */
	function ___clear_screen()
	{
		if (fCore::checkOS('windows')) {
			system('cls');
		} else {
			passthru('clear');
		}
	}

