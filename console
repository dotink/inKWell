#!/usr/bin/php -q
<?php

	/**
	 * Register as a shutdown function to ensure that any fatal errors or
	 * uncaught exceptions do not terminate the shell.  This function
	 * will cause it to respawn itself on shutdown.  The only downside is
	 * that all previous variables and information are lost.
	 *
	 * @param void
	 * @return void
	 */
	function ___respawn()
	{
		echo ob_get_clean() . "\n";

		if (!isset($GLOBALS['___called_quit'])) {
			echo "Resetting...\n";
			passthru(__FILE__);
		}
	}

	/**
	 * Set a fake GET request as if you were hitting the URL from a browser.
	 * This is useful if you are getting white pages of death to determine
	 * segfaults or something which might not be flushed properly via
	 * the server.
	 *
	 * @param $url The full URL, i.e. http://inkwell.dotink.org/
	 * @param $params An array of GET parameters (param => value)
	 * @return void
	 */
	function get($url, $params = array()) {
		$request_info = parse_url($url);
		if (isset($request_info['host'])) {
			$_SERVER['SERVER_NAME'] = $request_info['host'];
		}
		if (isset($request_info['path'])) {
			$_SERVER['REQUEST_URI'] = $request_info['path'];
		}
		$_SERVER['REQUEST_METHOD'] = 'GET';
		$_GET                      = $params;
		include 'routing.php';
	}

	/**
	 * Set a fake POST request as if you were hitting the URL from a browser.
	 *
	 * @param $url The full URL, i.e. http://inkwell.dotink.org/
	 * @param $params An array of GET parameters (param => value)
	 * @return void
	 */
	function post($url, $params = array()) {
		$request_info = parse_url($url);
		if (isset($request_info['host'])) {
			$_SERVER['SERVER_NAME'] = $request_info['host'];
		}
		if (isset($request_info['path'])) {
			$_SERVER['REQUEST_URI'] = $request_info['path'];
		}
		$_SERVER['REQUEST_METHOD'] = 'POST';
		$_POST                      = $params;
		include 'routing.php';
	}

	// Register the respawn shutdown function

	register_shutdown_function('___respawn');

	// Establish fake server parameters

	$_SERVER['DOCUMENT_ROOT']  = dirname(__FILE__);
	$_SERVER['REQUEST_URI']    = '/';
	$_SERVER['REQUEST_METHOD'] = 'GET';
	$_SERVER['REMOTE_ADDR']    = '127.0.0.1';

	// Change to our includes directory and run init

	chdir('includes');
	require 'init.php';

	// Set some basics regardless of configuration

	Moor::setCacheKey('console_cache');
	fCore::enableErrorHandling('html');
	fCore::enableExceptionHandling('html');

	// Output prompt and process commands as they come

	$___stdin   = fopen('php://stdin', 'r');
	$___depth   = 0;
	$___command = '';

	do {

		$___command = trim($___command);

		if ($___command) {
			$___echar = substr($___command, strlen($___command) - 1);

			switch ($___echar) {
				case '{':
					$___depth++;
					break;
				case '}':
					$___depth--;
					break;
			}

			if ($___depth == 0 && ($___echar == '}' || $___echar == ';')) {
				ob_start();
				fCore::startErrorCapture();
				try {
					eval($___command);
				} catch (fException $___e) {
					echo 'inKWell Exception:  ' . $___e->getMessage();
				}
				if(is_array($errors = fCore::stopErrorCapture())) {
					foreach ($errors as $error) {
						echo $error['type'] . ':  ' . $error['string'];
					}
				}

				$___command = '';
				$___output  = ob_get_clean();

				if($___output) {
					echo $___output;
					echo "\n";
				}
			} else {
				switch (trim($___command)) {
					case 'exit':
					case 'quit':
						$___called_quit = TRUE;
						exit();
						break;
					case 'clear':
						passthru('clear');
						$___command = '';
						break;
				}
			}
		}
		echo '[' . getcwd() . ']# ';
	} while(($___command .= fgets($___stdin)));

