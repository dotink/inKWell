#!/usr/bin/php -q
<?php

	/**
	 * Register as a shutdown function to ensure that any fatal errors or
	 * uncaught exceptions do not terminate the shell.  This function
	 * will cause it to respawn itself on shutdown.  The only downside is
	 * that all previous variables and information are lost.
	 *
	 * @param void
	 * @return void
	 */
	function ___respawn()
	{
		echo ob_get_clean() . "\n";

		if (!isset($GLOBALS['___called_quit'])) {
			echo "Resetting...\n";
			passthru(__FILE__);
		}
	}

	// Register the respawn shutdown function

	register_shutdown_function('___respawn');


	/**
	 * Check syntax and other validity aspects of PHP source code.
	 *
	 * @param string $string A string of PHP source code without an open tag
	 * @return boolean TRUE if code appears valid, FALSE otherwise
	 */
	function ___check($string)
	{

		$source      = '<?php ' . $string;

		$syntax_check = shell_exec(sprintf(
			'echo %s | php -l',
			escapeshellarg($source)
		));

		if (stripos($syntax_check, 'No syntax errors') === FALSE) {
			return FALSE;
		}


		foreach (($tokens = token_get_all($source)) as $i => $token) {

			if (is_array($token)) {

				if ($token[0] == T_STRING && $tokens[$i + 1] == '(') {

					$t      = $token[1];
					$c      = 1;
					$method = NULL;

					do {

						$previous_token = is_array($tokens[$i - $c])
							? $tokens[$i - $c][0]
							: $tokens[$i - $c];

						$c++;

					} while($previous_token == T_WHITESPACE);

					switch ($previous_token) {

						// Safe Cases

						case T_FUNCTION:
						case T_OBJECT_OPERATOR:
							break;

						case T_PAAMAYIM_NEKUDOTAYIM:

							$t      = $tokens[$i - 2][1];
							$method = $token[1];

						case T_NEW:

							if (!class_exists($t)) {
								echo sprintf(
									'Error:  Class %s does not exist.%s',
									$t
								) . PHP_EOL;
								return FALSE;
							}

							// Handle method_exists check for static methods

							if (isset($method) && !method_exists($t, $method)) {
								echo sprintf(
									'Error:  Method %s() does not exist on %s.',
									$method,
									$t
								) . PHP_EOL;
								return FALSE;
							}

							break;

						default:

							if (!function_exists($t)) {
								echo sprintf(
									'Error:  Function %s() does not exist.',
									$t
								) . PHP_EOL;
								return FALSE;
							}
							break;
					}
				}
			}
		}

		return TRUE;
	}


	// Establish fake server parameters

	$_SERVER['DOCUMENT_ROOT']  = dirname(__FILE__);
	$_SERVER['REQUEST_URI']    = '/';
	$_SERVER['REQUEST_METHOD'] = 'GET';
	$_SERVER['REMOTE_ADDR']    = '127.0.0.1';
	$_SERVER['SERVER_NAME']    = 'localhost';

	// Change to our includes directory and run init

	chdir(implode(DIRECTORY_SEPARATOR, array(
		dirname(__FILE__),
		'includes'
	)));

	require 'init.php';

	// Set some basics regardless of configuration

	fCore::enableErrorHandling('html');
	fCore::enableExceptionHandling('html');

	// Output prompt and process commands as they come

	$___stdin   = fopen('php://stdin', 'r');
	$___depth   = 0;
	$___line    = 1;
	$___command = '';

	do {

		$___command  = trim($___command);

		if ($___command) {

			$___echar    = substr($___command, strlen($___command) - 1);
			$___command .= PHP_EOL;

			switch ($___echar) {
				case '{':
					$___depth++;
					break;
				case '}':
					$___depth--;
					if ($___depth < 0) {
						$___depth = 0;
					}
					break;
			}

			if ($___depth == 0 && ($___echar == '}' || $___echar == ';')) {

				$___line = 1;

				if (___check($___command)) {

					ob_start();

					fCore::startErrorCapture();
					try {
						eval($___command);
					} catch (fException $___e) {
						echo 'Exception:  ' . $___e->getMessage();
					}

					if(is_array($errors = fCore::stopErrorCapture())) {
						foreach ($errors as $error) {
							echo $error['type'] . ':  ' . $error['string'];
						}
					}

					$___command = '';
					$___output  = ob_get_clean();

					if($___output) {
						echo $___output;
						echo PHP_EOL;
					}
				} else {
					$___command = '';
				}

			} else {

				$___line++;

				switch (trim($___command)) {
					case 'exit':
					case 'quit':
						$___called_quit = TRUE;
						exit();
						break;
					case 'clear':
						passthru('clear');
						$___command = '';
						break;
				}
			}
		}

		echo '[' . getcwd() . '][' . sprintf('%02s', $___line) . ']# ';

	} while(($___command .= fgets($___stdin)));

